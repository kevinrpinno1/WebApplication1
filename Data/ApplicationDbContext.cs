using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using WebApplication1.DTOs;
using WebApplication1.Models;

namespace Data
{
    public class ApplicationDbContext : IdentityDbContext<IdentityUser>
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }

        // DbSet properties for each entity in the model, representing the tables in the database
        public DbSet<Customer> Customers { get; set; } = null!;
        public DbSet<Order> Orders { get; set; } = null!;
        public DbSet<Product> Products { get; set; } = null!;
        public DbSet<OrderItem> OrderItems { get; set; } = null!;

        // OnModelCreating method overriden to configure entity properties and relationships
        // specifically ensuring that:
        //      CustomerId, OrderId, OrderItemID are GUIDs generated by the database
        //      ProductId is an identity column
        //      OrderDate defaults to the current UTC date/time
        //      Other Property constraints such as required fields and max lengths are enforced
        //      Delete behaviours are set appropriately for the entity relationships
        //          Cascade delete for Customer -> Orders and Order -> OrderItems
        //          Restrict delete for OrderItem -> Product to prevent deletion of products
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<UserDto>(b =>
            {
                b.Property(u => u.Email).IsRequired();
                b.HasIndex(u => u.Email).IsUnique();
            });


            modelBuilder.Entity<Customer>(entity =>
            {
                entity.HasKey(e => e.CustomerId);
                entity.Property(e => e.CustomerId)
                      .HasDefaultValueSql("NEWID()");
                entity.Property(e => e.Name)
                      .IsRequired()
                      .HasMaxLength(100);
                entity.Property(e => e.Address)
                      .HasMaxLength(200);
                entity.Property(e => e.PhoneNumber)
                      .HasMaxLength(50);
            });

            modelBuilder.Entity<Product>(entity => {
                entity.HasKey(e => e.ProductId);
                entity.Property(e => e.ProductId)
                      .UseIdentityColumn();
                entity.Property(e => e.Name)
                      .IsRequired()
                      .HasMaxLength(100);
                entity.Property(e => e.Price)
                      .HasColumnType("decimal(18,2)");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasKey(e => e.OrderId);
                entity.Property(e => e.OrderId)
                      .HasDefaultValueSql("NEWID()");
                entity.Property(e => e.OrderDate)
                      .IsRequired()
                      .HasDefaultValueSql("GETUTCDATE()");
                entity.HasOne(e => e.Customer)
                      .WithMany(c => c.Orders)
                      .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity<OrderItem>(entity => {
                entity.HasKey(e => e.OrderItemId);
                entity.Property(e => e.OrderItemId)
                      .HasDefaultValueSql("NEWID()");
                entity.Property(e => e.UnitPrice)
                      .HasColumnType("decimal(18,2)");
                entity.Property(e => e.Quantity)
                      .IsRequired();    
                entity.HasOne(e => e.Order)
                      .WithMany(o => o.OrderItems)
                      .OnDelete(DeleteBehavior.Cascade);
                entity.HasOne(e => e.Product)
                      .WithMany()
                      .OnDelete(DeleteBehavior.Restrict);
            });
        }
    }
}
