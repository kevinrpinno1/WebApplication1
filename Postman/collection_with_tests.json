{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d",
		"name": "Web API Demo (Consolidated Tests)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register and Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This script handles both successful login and failed login attempts.",
									"",
									"pm.test(\"Response has a valid status code\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Response contains a non-empty token on success\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.token).to.be.a('string').and.to.not.be.empty;",
									"    });",
									"",
									"    // Save the token to a collection variable for use in other requests",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.token) {",
									"        pm.collectionVariables.set(\"jwt_token\", jsonData.token);",
									"    }",
									"}",
									"",
									"if (pm.response.code === 401) {",
									"    pm.test(\"Response body indicates unauthorized on failure\", function () {",
									"        // Depending on your API, the body might be empty or contain an error",
									"        // This test is flexible.",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testuser@example.com\",\n    \"password\": \"Password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer",
			"item": [
				{
					"name": "Get All Customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has Content-Type: application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Each customer has expected fields and types\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (Array.isArray(jsonData) && jsonData.length > 0) {",
									"        let customer = jsonData[0];",
									"        pm.expect(customer).to.have.property(\"customerId\").that.is.a('string');",
									"        pm.expect(customer).to.have.property(\"name\").that.is.a('string');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"customer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a valid status code\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 400]);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    pm.test(\"Body is a valid JSON object on success\", function () {",
									"        pm.response.to.be.json;",
									"    });",
									"    pm.test(\"Created customer has expected fields\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('customerId').that.is.a('string');",
									"        pm.expect(jsonData.name).to.eql('Postman Test Customer');",
									"    });",
									"    // Save the new customer ID to a variable",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.customerId) {",
									"        pm.collectionVariables.set(\"createdCustomerId\", jsonData.customerId);",
									"    }",
									"}",
									"",
									"if (pm.response.code === 400) {",
									"    pm.test(\"Body contains validation errors on bad request\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.be.an('array');",
									"        pm.expect(jsonData[0]).to.have.property('errorMessage');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Postman Test Customer\",\n    \"address\": \"123 Postman Lane\",\n    \"phoneNumber\": \"555-123-4567\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"customer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Customer By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a valid status code\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Body is a valid JSON object on success\", function () {",
									"        pm.response.to.be.json;",
									"    });",
									"    pm.test(\"Returned customer ID matches the requested ID\", function () {",
									"        var jsonData = pm.response.json();",
									"        var requestedId = pm.collectionVariables.get(\"createdCustomerId\");",
									"        pm.expect(jsonData.customerId).to.eql(requestedId);",
									"    });",
									"}",
									"",
									"if (pm.response.code === 404) {",
									"    pm.test(\"Response body is empty for Not Found\", function () {",
									"        pm.response.to.not.have.body;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/customer/{{createdCustomerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"customer",
								"{{createdCustomerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a valid status code\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);",
									"});",
									"",
									"if (pm.response.code === 204) {",
									"    pm.test(\"Response body is empty on success\", function () {",
									"        pm.response.to.not.have.body;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/customer/{{createdCustomerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"customer",
								"{{createdCustomerId}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{jwt_token}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Each product has expected fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        let product = jsonData[0];",
									"        pm.expect(product).to.have.property('productId').that.is.a('number');",
									"        pm.expect(product).to.have.property('name').that.is.a('string');",
									"        pm.expect(product).to.have.property('price').that.is.a('number');",
									"        pm.expect(product).to.have.property('stockQuantity').that.is.a('number');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a valid status code\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 400]);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.test(\"Created product has expected fields\", function () {",
									"        pm.expect(jsonData).to.have.property('productId').that.is.a('number');",
									"        pm.expect(jsonData.name).to.eql('Postman Test Product');",
									"    });",
									"    pm.collectionVariables.set(\"createdProductId\", jsonData.productId);",
									"}",
									"",
									"if (pm.response.code === 400) {",
									"    pm.test(\"Body contains validation errors on bad request\", function () {",
									"        pm.expect(pm.response.json()).to.be.an('array');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Postman Test Product\",\n    \"price\": 19.99,\n    \"stockQuantity\": 50\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"product"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{jwt_token}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a valid status code\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 400]);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.test(\"Created order has expected fields\", function () {",
									"        pm.expect(jsonData).to.have.property('orderId').that.is.a('string');",
									"        pm.expect(jsonData).to.have.property('orderTotal').that.is.a('number');",
									"        pm.expect(jsonData.status).to.eql('pending');",
									"    });",
									"    pm.collectionVariables.set(\"createdOrderId\", jsonData.orderId);",
									"    if(jsonData.orderItems && jsonData.orderItems.length > 0) {",
									"       pm.collectionVariables.set(\"createdOrderItemId\", jsonData.orderItems[0].orderItemId);",
									"    }",
									"}",
									"",
									"if (pm.response.code === 400) {",
									"    pm.test(\"Body contains error message on bad request\", function () {",
									"        // Can be a validation error array or a stock error string",
									"        try {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData).to.be.an('array');",
									"        } catch (e) {",
									"            pm.expect(pm.response.text()).to.not.be.empty;",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerId\": \"{{createdCustomerId}}\",\n    \"discountAmount\": 5.00,\n    \"orderItems\": [\n        {\n            \"productId\": 1,\n            \"quantity\": 1\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order Status (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a valid status code\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 403, 404]);",
									"});",
									"",
									"if (pm.response.code === 403) {",
									"    pm.test(\"Body is empty for Forbidden\", function() {",
									"        pm.response.to.not.have.body;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"Shipped\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{createdOrderId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"{{createdOrderId}}",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{jwt_token}}",
						"type": "string"
					}
				]
			}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://localhost:7053"
		},
		{
			"key": "jwt_token",
			"value": ""
		},
		{
			"key": "createdCustomerId",
			"value": ""
		},
		{
			"key": "createdProductId",
			"value": ""
		},
		{
			"key": "createdOrderId",
			"value": ""
		},
		{
			"key": "createdOrderItemId",
			"value": ""
		}
	]
}